#!/usr/bin/env perl

use strict;
use warnings;

package toman;

sub mklist($)
{
    local $_ = shift;
    s/\n\.\s+/\n\eTP\n\*\n/g;
    s/\A\n\eTP//;
    return $_;
}

sub mktable($)
{
    local $_ = shift;
    s/\A\n?\. //;
    my @cell = split /\n\. /;
    $_ = "";
    for (my $n = 0 ; $n < $#cell ; $n += 2) {
	if ($cell[$n] =~ /^%([^%]+)%$/) {
	    $cell[$n] = "\eI $1";
	} elsif ($cell[$n] =~ /^([^%]+)%([^%]+)%$/) {
	    $cell[$n] = "\eBI \"$1\" $2";
	} else {
	    $cell[$n] = "\eB $cell[$n]";
	}
	$_ .= "\eTP\n$cell[$n]\n$cell[$n + 1]\n";
    }
    s/\A\n\eTP//;
    s/\n*\Z/\n\n/;
    return $_;
}

sub mkgrid($$)
{
    my @cols;
    local $_ = shift;
    my $prev = s/^(\s+)// ? length $1 : 0;
    while (s/^(\S)(\s*)//) {
	my $n = length($2) || 72;
	++$n;
	push @cols, { from => $prev, to => $n, align => $1 };
	$prev += $n;
    }

    $_ = shift;
    my @tbl;
    while (s/^([^\n]+)\n//) {
	my $line = $1;
        push @tbl, [ ];
	foreach my $col (@cols) {
	    my $entry = substr $line, $col->{from}, $col->{to};
	    $entry =~ s/^\s+//;
	    $entry =~ s/\s+$//;
            push @{$tbl[-1]}, $entry;
        }
    }

    foreach my $x (0..$#cols) {
        my @rows;
        my $colsize = 0;
        foreach my $y (0..$#tbl) {
            my $entry = $tbl[$y][$x];
            $entry =~ tr/!#%`//d;
            my $size = length $entry;
            push @rows, { row => $y, entry => $tbl[$y][$x], size => $size };
            $colsize = $size if $colsize < $size;
        }
        foreach my $row (@rows) {
            my $entry = $row->{entry};
            my $pad = $colsize - $row->{size};
            next if $pad <= 0;
            if ($cols[$x]{align} eq "l") {
                $entry .= "~" x $pad;
            } elsif ($cols[$x]{align} eq "r") {
                $entry = ("~" x $pad) . $entry;
            } elsif ($cols[$x]{align} eq "c") {
                my $a = $pad >> 1;
                my $b = $pad - $a;
                $entry = ("~" x $a) . $entry . ("~" x $b);
            }
            $tbl[$row->{row}][$x] = $entry;
        }
    }

    my $tbl = "\n";
    foreach my $row (@tbl) {
        $tbl .= join "", @$row;
	$tbl =~ s/~*\Z/\n\ebr\n/;
    }
    $tbl =~ s/\ebr\n\Z/\n/;
    return $tbl;
}

sub sfix($) { local $_ = shift; s/\s+/ /; $_ }

sub generate($)
{
    my $mantop =
	".TH \@name\@ 3 \"\@date\@\" \"\@title\@\"\n"
      . ".LO 1\n"
      . ".SH NAME\n"
      . "\@name\@ \\- \@desc\@\n"
      . ".P\n";

    local $_ = shift;
    s/\A\s*(\S[^\n]+\S) *\n//;
    my $topline = $1;
    my ($name, $title, $date, $desc) = split " / ", $topline;

    s/$name/!$name!/g;

    s/\n\.indent\n/\n/g;
    s/\n\.formatted\n/\n/g;
    s/\n\.brk\n/\n\ebr\n/g;
    s{\n\.list((?:\n[^\n]+)+)\n\n}
     {"\n\eTP 2\n\ePD 0".mklist($1)."\n\ePD 1\n\n"}eg;
    s/\n\.table((?:\n[^\n]+)+)\n\n/"\n".mktable($1)."\n"/eg;

    s/\n+\.Synopsis((?:\n[^\n]+)+)\n\n/\n\ebr\n\eSH SYNOPSIS\n$1/;

    s/\n+\.section\s+([^\n]+)\n/"\n\ebr\n\eSH ".uc$1/eg;
    s/\n+\.subsection\s+([^\n]+)\n/\n\eP\n\eB \"$1\"\n/g;

    s/\n\.grid\n([^\n]+)\n((?:[^\n]+\n)+)\n/mkgrid($1,$2)/eg;

    s{\n? *\#([^\#]+)\#(\S*) *\s}
     {length$2?"\n\eBR \"".uc(sfix$1)."\" $2\n":"\n\eB ".uc(sfix$1)."\n"}eg;
    s/`([^`]+)`/$1/g;
    s/%([^%]+)%/\\fI$1\\fR/g;
    s/!([^!]+)!/\\fB$1\\fR/g;

    s/\A\s+//;
    s/\s+\Z/\n/;
    s/\n\n+/\n\eP\n/g;

    s/\n\./\n \./g;

    s/~/\\ /g;
    tr/\e/./;

    $mantop =~ s/\@name\@/$name/g;
    $mantop =~ s/\@title\@/$title/g;
    $mantop =~ s/\@date\@/$date/g;
    $mantop =~ s/\@desc\@/$desc/g;

    return "$mantop$_";
}

#
#
#

package totext;

our @toc;

sub item($)
{
    local $_ = shift;
    my $n = scalar(@toc) + 1;
    chomp;
    s/\s+/ /g;
    push @toc, "$n. $_\n";
    $_ = uc $_;
    return "\n~\n $n. $_\n";
}

sub mkindent($)
{
    local $_ = shift;
    s/\n/\n    /g;
    return "\n$_\n";
}

sub mklist($)
{
    local $_ = shift;
    s/\n([^.])/\n  $1/g;
    s/\n\.\s+/\n* /g;
    return "\n$_\n\n";
}

sub mktable($)
{
    my (@lines) = split "\n", shift;
    my $n = 1;
    shift @lines while $lines[0] eq "";
    foreach (@lines) {
        if (/^\. /) {
            if ($n ^= 1) {
                s/^\./ /;
            } else {
                s/^\./\n-/;
            }
        } elsif ($n) {
            s/^/  /;
        }
    }
    $_ = join "\n", @lines;
    return "\n$_\n\n";
}

sub dumbmkgrid($$)
{
    shift;
    local $_ = shift;
    return "\n$_\n\n";
}

sub mkgrid($$)
{
    my @cols;
    local $_ = shift;
    my $prev = s/^(\s+)// ? length $1 : 0;
    while (s/^(\S)(\s*)//) {
	my $n = length($2) || 72;
	++$n;
	push @cols, { from => $prev, to => $n, align => $1 };
	$prev += $n;
    }

    $_ = shift;
    my @tbl;
    while (s/^([^\n]+)\n//) {
	my $line = $1;
        push @tbl, [ ];
	foreach my $col (@cols) {
	    my $entry = substr $line, $col->{from}, $col->{to};
	    $entry =~ s/^\s+//;
	    $entry =~ s/\s+$//;
            push @{$tbl[-1]}, $entry;
        }
    }

    foreach my $x (0..$#cols) {
        my @rows;
        my $colsize = 0;
        foreach my $y (0..$#tbl) {
            my $entry = $tbl[$y][$x];
            $entry =~ tr/!#%`//d;
            my $size = length $entry;
            push @rows, { row => $y, entry => $tbl[$y][$x], size => $size };
            $colsize = $size if $colsize < $size;
        }
        foreach my $row (@rows) {
            my $entry = $row->{entry};
            my $pad = $colsize - $row->{size};
            next if $pad <= 0;
            if ($cols[$x]{align} eq "l") {
                $entry .= "~" x $pad;
            } elsif ($cols[$x]{align} eq "r") {
                $entry = ("~" x $pad) . $entry;
            } elsif ($cols[$x]{align} eq "c") {
                my $a = $pad >> 1;
                my $b = $pad - $a;
                $entry = ("~" x $a) . $entry . ("~" x $b);
            }
            $tbl[$row->{row}][$x] = $entry;
        }
    }

    my $tbl = "";
    foreach my $row (@tbl) {
        $tbl .= join "", @$row;
	$tbl =~ s/~*\Z/\n/;
    }
    return "\n$tbl\n";
}

sub generate($)
{
    local $_ = shift;
    s{\A[^/]+/\s+([^/]*\S)\s+/[^\n]+\n+}{\n};
    my $title = uc $1;

    s/\n\.Synposis\n/\n/;
    s/\n\.section\s+([^\n]+)\n/item($1)/eg;
    s/\n\.subsection\s+([^\n]+)\n/\n  $1\n/g;

    s/\n\.formatted((?:\n[^\n]+)+)\n\n/$1\n\n/g;
    s/\n\.indent((?:\n[^\n]+)+)\n\n/mkindent($1)/eg;
    s/\n\.list((?:\n[^\n]+)+)\n\n/mklist($1)/eg;
    s/\n\.table((?:\n[^\n]+)+)\n\n/mktable($1)/eg;
    s/\n\.grid\n([^\n]+)\n((?:[^\n]+\n)+)\n/mkgrid($1,$2)/eg;

    s/\#([^\#]+)\#/$1/g;
    s/\`([^\`]+)\`/$1/g;
    s/\%([^\%]+)\%/$1/g;
    s/\!([^\!]+)\!/$1/g;
    s/~/ /g;

    s/\n.brk\n/\n/g;
    s/\n\n+/\n\n/g;

    my $toc = "";
    if (@toc > 2) {
        $toc = "Contents\n\n" . join("", @toc);
    }

    return "$title\n\n$toc$_";
}

#
#
#

package tohtml;

our (@toc, %toc);

sub item($)
{
    local $_ = shift;
    chomp;
    s/\s+/ /g;
    my $fragment = @toc;
    push @toc, $_;
    $toc{$_} = $fragment;
    return "\n\n<a name=\"$fragment\"></a>\n<h2>\n$_\n</h2>\n\n";
}

sub itemlkup($)
{
    local $_ = shift;
    s/\s+/ /g;
    warn "unrecognized section reference \"$_\"\n" unless exists $toc{$_};
    return "<a href=\"\#" . ($toc{$_} || "???") . "\">$_</a>";
}

sub mklist($)
{
    local $_ = shift;
    s/\n\.\s+/\n<li>/g;
    return "\n<ul>$_\n</ul>\n\n";
}

sub mktable($)
{
    local $_ = shift;
    my ($n, $pos) = 0;

    while (($pos = index $_, "\n. ") >= 0) {
	if ($n ^= 1) {
	    substr($_, $pos, 3) = "</td></tr>\n<tr><td>";
	} else {
	    substr($_, $pos, 3) = "</td>\n<td>";
	}
    }
    s{\A</td></tr>}{\n<table class="table">};
    s{\Z}{</td></tr>\n</table>\n\n};

    return $_;
}

sub mkgrid($$)
{
    my @cols;
    my %align = qw(l left r right c center);
    local $_ = shift;
    my $prev = s/^(\s+)// ? length $1 : 0;
    while (s/^(\S)(\s*)//) {
	my $n = length($2) || 99;
	++$n;
	push @cols, [ $prev, $n, $1 ];
	$prev += $n;
    }

    $_ = shift;
    my $tbl = "";
    while (s/^([^\n]+)\n//) {
	my $line = $1;
	$tbl .= "<tr>\n<td>~</td>\n";
	foreach my $col (@cols) {
	    my $entry = substr $line, $col->[0], $col->[1];
            $entry =~ s/^\s+//;
            $entry =~ s/\s+$//;
	    $tbl .= "<td align=\"$align{$col->[2]}\">$entry</td>\n";
	}
	$tbl .= "</tr>\n";
    }
    return "\n<table class=\"grid\">\n$tbl</table>\n<p>\n";
}

sub generate($)
{
    my $htmltop =
	"<!DOCTYPE html>\n"
      . "<html>\n<head>\n"
      . "<title>\@title\@</title>\n"
      . "<style>\n\@style\@</style>\n"
      . "</head>\n<body>\n"
      . "<h1>\@title\@</h1>\n";
    my $htmlbot = "</body>\n</html>\n";
    my $stylesheet =
        "body { margin: 1em; max-width: 72em; }\n"
      . "h1 { text-align: center; padding-bottom: 1em; }\n"
      . ".table td { vertical-align: top; padding: 0.5em 1em; }\n"
      . ".grid td { padding: 0; }\n";

    local $_ = shift;
    s{\A[^/]+/\s+([^/]*\S)\s+/[^\n]+\n+}{\n};
    my $title = $1;

    s/\n\.Synopsis((?:\n[^\n]+)+)\n\n/\n/;
    my $synopsis = $1;
    $synopsis = "<p>$synopsis\n</p>\n";

    s/\n\.section\s+([^\n]+)\n/item$1/eg;
    s{\n\.subsection\s+([^\n]+)\n}{\n<h3>$1</h3>\n}g;
    s{\n\.indent((?:\n[^\n]+)+)\n\n}{\n<blockquote>$1\n</blockquote>\n\n}g;
    s{\n\.formatted((?:\n[^\n]+)+)\n\n}{\n<pre>$1</pre>\n\n}g;

    s{\n\.list((?:\n[^\n]+)+)\n\n}{mklist($1)}eg;
    s{\n\.table((?:\n[^\n]+)+)\n\n}{mktable($1)}eg;
    s{\n\.grid\n([^\n]+)\n((?:[^\n]+\n)+)\n}{mkgrid($1,$2)}eg;

    s/\#([^\#]+)\#/itemlkup$1/eg;
    s{\`([^\`]+)\`}{<tt>$1</tt>}g;
    s{%([^%]+)%}{<i>$1</i>}g;
    s{!([^!]+)!}{<b>$1</b>}g;

    s/&/&amp;/;
    s/~/&nbsp;/g;
    s/\s--\s/ &mdash; /g;

    s/\n.brk\n/\n<br>\n/g;
    s/\n\n+/\n<p>\n/g;

    my $toc = "";
    if (@toc > 2) {
	$toc = "<p>\n<h2>Contents</h2>\n<p>\n<ul>\n"
	     . join("", map { "<li><a href=\"\#$_\">$toc[$_]</a>\n" } 0..$#toc)
	     . "</ul>";
    }

    $htmltop =~ s/\@title\@/$title/g;
    $htmltop =~ s/\@style\@/$stylesheet/;

    return "$htmltop$synopsis$toc$_$htmlbot";
}

#
#
#

package main;

my %formats = (
    man  => { extension => "3",    generator => \&toman::generate },
    text => { extension => "txt",  generator => \&totext::generate },
    html => { extension => "html", generator => \&tohtml::generate },
);

my (%outputs) = map { $_, undef } keys %formats;
my ($infilename, $basefilename);

sub stop(@)
{
    die "mkdocs: error: @_\n" if @_;
    print "Usage: mkdocs [OPTIONS] [INFILE]\n\n";
    print "  --base=BASE           Use BASE as the base output filename.\n";
    print "  --man[=OUTFILE]       Output a section 3 man page.\n";
    print "  --html[=OUTFILE]      Output an HTML document.\n";
    print "  --text[=OUTFILE]      Output a plain text file.\n";
    print "  --all[=BASE]          Output in all available formats.\n\n";
    print "If INFILE is \"-\" or omitted, read from standard input.\n";
    exit 0;
}

sub getfilename($)
{
    my $fmt = shift;
    return $outputs{$fmt} if $outputs{$fmt};
    stop "no output filename defined for $fmt" unless $basefilename;
    return "$basefilename." . $formats{$fmt}{extension};
}

foreach (@ARGV) {
    if (/^--(\w+)(?:=(.*))?/) {
        my ($name, $val) = ($1, $2);
        stop if $name eq "help";
        if ($name eq "all") {
            $outputs{$_} = "" for keys %outputs;
            $basefilename = $val;
        } elsif ($name eq "base") {
            stop "--base requires an argument" unless $val;
            $basefilename = $val;
        } else {
            stop "unknown format: \"$name\"" unless exists $outputs{$name};
            stop "multiple outputs for \"$name\"" if defined $outputs{$name};
            $outputs{$name} = $val || "";
        }
    } else {
        stop "too many inputs" if defined $infilename;
        $infilename = $_;
    }
}

($basefilename ||= $infilename) =~ s/\.[^.]+$//;
$infilename ||= "-";

open IN, $infilename or die "$infilename: $!\n";
$_ = join "", <IN>;
close IN;

foreach my $format (keys %formats) {
    next unless defined $outputs{$format};
    my $outfilename = getfilename $format;
    open OUT, ">$outfilename" or die "$outfilename: $!\n";
    print OUT $formats{$format}{generator}->($_);
}
